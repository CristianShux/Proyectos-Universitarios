= Introducción a la Programación: Trabajo Práctico 1
:title-page:
:numbered:
:source-highlighter: coderay
:tabsize: 4

Cristian Jurajuria <cljurajuria23@gmail.com>; Bernabe Couderc <bernacouderc@gmail.com>; Ulises Loggia <uliojedaloggia@yahoo.com>

v1, {23/05/2023}. Docentes Damian Marquez, Leonardo Waingarten, Hernán Rondelli (COM-01)

== Introducción

En un lugar muy alejado de la galaxia existen unas tropas espaciales de otra raza llamadas Destructores Estelares, que invaden planetas
y destruyen todo a su paso. Para combatir a los Destructores Estelares, la Súper Patrulla Espacial de la raza humana creó una nave de 
combate llamada Astro-MegaShip y nos encomendó la creacion de una aplicación para entrenar a nuevos pilotos de la nave. El objetivo 
de este trabajo práctico es desarrollar un video juego en el cual la Astro-MegaShip derrotar a la mayor cantidad de destructores y eliminar
al líder de ellos (jefe), sin ser destruida en el intento.

== Descripción

Para realizar el trabajo comenzamos a plantear ideas para el desarrollo del juego, clases, ideas para el interfaz. Al principio tuvimos 
varios desvíos o diferentes ideas, pero una vez que comenzamos a trabajar con el código se fueron uniendo y ocurriendo nuevas ideas. 
Para sacarnos dudas o mismo ayudar al proceso de realizado del trabajo nos apoyamos con foros de Java orientado a objetos y YouTube.

- A continuación, comentamos las principales complejidades que tuvimos a lo largo del trabajo.

  * Tuvimos muchas complicaciones con el uso de los variables y “Getters”, lo usábamos de una manera errónea o mismo habían de más, hasta
    que se nos ocurrió una manera de usarlos bien con la ayuda del profesor. 

  * Con los destructores tuvimos muchos inconvenientes, en un principio no se nos ocurría como podríamos generar la colisión entre ellos y 
    “reboten”, hasta que usamos una idea planteada en clase por los profesores y supimos que recorriendo el array de destructores dos veces
    podíamos tomar la posición de cada uno y hacer un código que si las dos posiciones se juntan vayan para la dirección contraria a la que 
    iban y así logramos hacer que reboten.

  * El crear el fondo del juego nos costo ya que no encontrábamos la manera de hacer que este tenga un movimiento constante y este en 
    bucle, supimos que usando la imagen dos veces, usamos el método mover con la condición de que cuando termine el primero comience 
    el segundo, esté método es constante y al ser las imágenes idénticas no se aprecia un cambio.

  * Con la clase bala también tuvimos mucho dolor de cabeza ya que en un principio teníamos muchos métodos que irían en esta clase se 
    encontraban en el “main” el profesor nos marcó que era un error y esto nos llevó de imprevisto y no supimos como adaptarlo hasta 
    con ideas que fuimos planteando y mismo con ayuda de foros pudimos hacerlo correctamente.

== Implementación 

.Clase Juego
[source, java]
----
package juego;

import java.awt.Color;
import java.util.Random;

import entorno.Entorno;
import entorno.Herramientas;
import entorno.InterfaceJuego;

public class Juego extends InterfaceJuego {

	// El objeto Entorno que controla el tiempo y otros
	private Entorno entorno;

	// Nave
	private Nave nave;
	private int vidaNave;

	// Jefe
	private Enemigo jefe;
	private int vidaJefe;

	// Enemigos y Asteroides
	private Enemigo[] destructores;
	private Asteroides[] asteroides;

	// Fondo
	private Fondo fondo;

	// Contadores
	private int cantidadPuntos;
	private int cantidadEnemigos;
	private int cantidadDeGolpesDeEnemigos;
	private int Ticks;
	private int cantidadDestructores;
	private int Rounds;
	private int cantidadMatados;

	// Variables de Control
	private int enterFuePresionada;
	private boolean Perdio;
	private boolean Gano;

	// Balas
	private Bala plasma;
	private Bala superPlasma;
	private Bala proyectil;

	// Temporizadores
	private int tiempoDesdeUltimoDisparo;
	private double distanciaAlBordeInferior;

	// Variable Random
	private Random r;

	public Juego() {
		// Inicializa el objeto entorno
		this.entorno = new Entorno(this, "Lost Galaxian", 800, 600);

		// Inicializa variable Random
		this.r = new Random();

		// Creación asteroides
		this.asteroides = new Asteroides[6];
		for (int i = 0; i < asteroides.length; i++) {
			this.asteroides[i] = new Asteroides(r.nextInt(1400) - 300, -r.nextInt(500), 10);
		}

		// Creacion destructores
		this.destructores = new Enemigo[4];
		for (int i = 0; i < destructores.length; i++) {
			this.destructores[i] = new Enemigo(r.nextInt(700) + 50, (-r.nextInt(800) - (r.nextInt(500) + 200)), 4,
					true);
		}

		// Creacion Jefe
		this.jefe = new Enemigo(400, -700, 1, false);
		this.vidaJefe = 100;

		// Creacion Nave
		this.nave = new Nave(400, 550, 10);
		this.vidaNave = 100;

		// Creacion Fondo
		this.fondo = new Fondo("FondoEstrella.jpg");
		this.fondo = new Fondo("FondoEstrella.jpg");

		// Creacion Contadores
		this.cantidadDeGolpesDeEnemigos = 0;
		this.tiempoDesdeUltimoDisparo = 0;
		this.cantidadEnemigos = 0;
		this.cantidadPuntos = 0;
		this.Ticks = 0;
		this.cantidadDestructores = 0;
		this.Rounds = 1;
		this.cantidadMatados = 0;

		// Creacion de variables de Control
		this.Perdio = false;
		this.Gano = false;

		// Inicia el juego!
		this.entorno.iniciar();
		Herramientas.cargarSonido("space.wav").loop(6);

	}

	/**
	 * Durante el juego, el método tick() será ejecutado en cada instante y por lo
	 * tanto es el método más importante de esta clase. Aquí se debe actualizar el
	 * estado interno del juego para simular el paso del tiempo (ver el enunciado
	 * del TP para mayor detalle).
	 */

	public void tick() {

		Ticks++;
		// Si se presiona SHIFT se reinicia el juego en caso de haber perdido o ganado.
		if (entorno.sePresiono(entorno.TECLA_SHIFT) && Perdio || entorno.sePresiono(entorno.TECLA_SHIFT) && Gano) {
			Perdio = false;
			Gano = false;
			Rounds = 1;

			cantidadEnemigos = 0;
			cantidadDestructores = 0;
			cantidadPuntos = 0;

			vidaNave = 100;
			vidaJefe = 100;
			asteroides = new Asteroides[6];
			destructores = new Enemigo[4];

			// Creacion Jefe
			jefe = new Enemigo(400, -700, 1, false);

			// Creacion Nave
			nave = new Nave(400, 550, 10);

			// Creación asteroides
			for (int i = 0; i < asteroides.length; i++) {
				asteroides[i] = new Asteroides(r.nextInt(1400) - 300, -r.nextInt(500), 9);
			}
			// Creacion destructores
			for (int i = 0; i < destructores.length; i++) {
				destructores[i] = new Enemigo(r.nextInt(700) + 50, (-r.nextInt(800) - (r.nextInt(500) + 200)), 4, true);
			}
		}
		// CODIGO CUANDO SE GANA
		if (Gano) {
			fondo.dibujarFondo(entorno);
			fondo.mover();
			fondo.dibujarGanado(entorno);
			entorno.cambiarFont("Arial", 30, Color.WHITE);
			entorno.escribirTexto("Enemigos destruidos: " + cantidadEnemigos, 60, 300);
			entorno.escribirTexto("Puntaje obtenido: " + cantidadPuntos, 460, 300);
			entorno.escribirTexto("Ronda maxima: " + Rounds, 300, 340);
			nave = null;
			destructores = null;
			asteroides = null;
			if (entorno.sePresiono(entorno.TECLA_DELETE)) {
				System.exit(0);
			}
			return;
		}

		// CODIGO CUANDO SE PIERDE
		if (Perdio) {
			destructores = null;
			asteroides = null;
			fondo.dibujarFondo(entorno);
			fondo.mover();
			fondo.dibujarFinal(entorno);
			if (entorno.sePresiono(entorno.TECLA_DELETE)) {
				System.exit(0);
			}
			entorno.cambiarFont("Arial", 30, Color.WHITE);
			entorno.escribirTexto("Enemigos destruidos: " + cantidadEnemigos, 60, 260);
			entorno.escribirTexto("Puntaje obtenido: " + cantidadPuntos, 460, 260);
			entorno.escribirTexto("Ronda maxima: " + Rounds, 300, 300);
			return;
		}
		if (entorno.sePresiono(entorno.TECLA_ENTER)) {
			enterFuePresionada = 1;
		}

		if (enterFuePresionada == 0) {
			fondo.dibujarInicio(entorno);
		}

		// COMIENZO DEL JUEGO
		if (enterFuePresionada == 1) {
			fondo.dibujarFondo(entorno);
			fondo.mover();

			// CODIGO NAVE
			if (nave != null && vidaNave >= 0) {
				nave.dibujarNave(entorno);

				// Movimiento Nave
				if (entorno.estaPresionada(entorno.TECLA_IZQUIERDA)) {
					nave.moverIzquierda();
				}
				if (entorno.estaPresionada(entorno.TECLA_DERECHA)) {
					nave.moverDerecha();
				}

				// Bala Enemiga mata a la Nave
				if (nave != null && plasma != null && nave.chocasteConBalaEnemiga(plasma)) {
					cantidadDeGolpesDeEnemigos++;
					if (cantidadDeGolpesDeEnemigos >= 1) {
						vidaNave = vidaNave - 10;
						Herramientas.cargarSonido("lowDown.wav").start();
						cantidadDeGolpesDeEnemigos = 0;
					}
					plasma = null;
					if (vidaNave <= 0) {
						nave = null;
						Perdio = true;
					}
					plasma = null;

				}

				// Dibujo Proyectil de la Nave
				if (proyectil != null) {
					proyectil.dibujarBala(entorno, "balaNave");
					proyectil.avanzarBala();

					if (proyectil.ProyectilNavePasaElLimite(proyectil)) {
						proyectil = null;
					}
				}
				// Nave dispara el proyectil
				if (entorno.estaPresionada(entorno.TECLA_ESPACIO) && proyectil == null && nave != null) {
					proyectil = nave.disparar(entorno);
					Herramientas.cargarSonido("laser5.wav").start();
				}
			}

			// CODIGO ENEMIGOS
			if (destructores != null) {
				for (int i = 0; i < destructores.length; i++) {

					// Dibujamos a los enemigos y los movemos
					if (destructores[i] != null) {
						destructores[i].moverEnemigos();
						destructores[i].dibujarEnemigos(entorno);

						// cuando se pasa del limite del entorno crea otros en otra posicion arriba
						if (destructores[i].EnemigosReaparicionYEliminacionDelLimiteEntorno(entorno, destructores[i])) {
							destructores[i] = new Enemigo(r.nextInt(700) + 50,
									(-r.nextInt(800) - (r.nextInt(500) + 200)), 4, true);
						}

						// si se van del entorno se eliminan asi ahorramos recursos
						if (destructores[i].EnemigosReaparicionYEliminacionDelLimiteEntorno(entorno, destructores[i])) {
							destructores[i] = null;
						}

						// Los destructores chocan con ellos mismos
						for (int j = i + 1; j < destructores.length; j++) {
							if (destructores[j] != null
									&& destructores[j].destructorChocaConDestructor(destructores[i])) {
								destructores[i].invertirDireccionX();
								destructores[j].invertirDireccionX();
							}
						}
					}
					// Mide la distancia del borde inferior para que desaparezca la bala a cierta
					// cantidad
					if (destructores[i] != null) {
						distanciaAlBordeInferior = destructores[i].distanciaAlBordeInferior(destructores[i]);
					}

					// Intervalo de disparo enemigo
					tiempoDesdeUltimoDisparo++;
					if (tiempoDesdeUltimoDisparo >= 100 && plasma == null && destructores[i] != null
							&& distanciaAlBordeInferior > 100) {
						plasma = destructores[i].disparaDestructor(entorno);
						Herramientas.cargarSonido("Disparo3.wav").start();
						tiempoDesdeUltimoDisparo = 0;
					}

					// Dibuja la bala enemiga
					if (plasma != null && nave != null) {
						plasma.avanzarBala();
						plasma.dibujarBala(entorno, "balaEnemiga");
						if (plasma.PlasmasPasaElLimite(plasma)) {
							plasma = null;
						}
					}

					// Bala Nave mata a los enemigos
					if (destructores[i] != null && proyectil != null
							&& proyectil.chocasteConEnemigo(destructores[i], true)) {
						cantidadDeGolpesDeEnemigos++;
						if (cantidadDeGolpesDeEnemigos >= 1) {
							destructores[i] = null;
							cantidadDestructores++;
							Herramientas.cargarSonido("explosion1.wav").start();
							cantidadDeGolpesDeEnemigos = 0;
						}

						// Si la vida llega a 0 Pierdo
						proyectil = null;
						if (vidaNave <= 0) {
							nave = null;
							Perdio = true;
						}

						// Contador de enemigos destruidos y puntos
						if (destructores[i] == null) {
							cantidadEnemigos++;
							cantidadPuntos = cantidadPuntos + 10;
						}
					}

					// Enemigo hace daño a Nave
					if (destructores[i] != null && nave != null && nave.chocasteConEnemigo(destructores[i])) {
						destructores[i] = null;
						cantidadEnemigos++;
						cantidadDestructores++;
						vidaNave = vidaNave - 20;
						Herramientas.cargarSonido("lowDown.wav").start();
						// Si la vida llega a 0 Pierde
						if (vidaNave <= 0) {
							nave = null;
							Perdio = true;
						}
					}

					// Generacion de Enemigos cuando esten todos muertos
					if (destructores[i] == null && Ticks % 400 == 0 && cantidadDestructores % 4 == 0) {
						destructores[i] = new Enemigo(r.nextInt(700) + 50, (-r.nextInt(800) - (r.nextInt(500) + 200)),
								4, true);
						destructores[i].dibujarEnemigos(entorno);
						cantidadMatados++;

						if (cantidadMatados % 4 == 0) {
							Rounds++;
						}
					}

					// CODIGO JEFE Y ROUNDS
					if (cantidadDestructores == 16) {
						destructores[i] = null;
					}
					// Rondas
					if (Rounds == 5) {
						cantidadMatados = 0;
						if (jefe != null) {
							entorno.cambiarFont("Arial", 18, Color.WHITE);
							entorno.escribirTexto("Jefe: " + vidaJefe, 375, 45);
							jefe.dibujarEnemigos(entorno);
							jefe.moverEnemigos();

							// Jefe dispara
							if (superPlasma == null && jefe != null) {
								superPlasma = jefe.disparaJefe(entorno);
								Herramientas.cargarSonido("sonidoplasma.wav").start();
							}

							if (superPlasma != null && nave != null) {
								superPlasma.avanzarBala();
								superPlasma.dibujarBala(entorno, "balaJefe");
								if (superPlasma.PlasmasPasaElLimite(superPlasma)) {
									superPlasma = null;
								}
							}
							// Bala del Jefe choca con la Nave
							if (nave != null && superPlasma != null && nave.chocasteConBalaJefe(superPlasma)) {
								cantidadDeGolpesDeEnemigos++;
								if (cantidadDeGolpesDeEnemigos >= 1) {
									vidaNave = vidaNave - 30;
									Herramientas.cargarSonido("lowDown.wav").start();
									cantidadDeGolpesDeEnemigos = 0;
								}
								superPlasma = null;
								if (vidaNave <= 0) {
									nave = null;
									Perdio = true;
								}
								superPlasma = null;

							}

							// Si bala Nave toca al jefe le saca vida
							if (proyectil != null && jefe != null && proyectil.chocasteConEnemigo(jefe, false)) {

								cantidadDeGolpesDeEnemigos++;
								if (cantidadDeGolpesDeEnemigos >= 1) {
									vidaJefe = vidaJefe - 10;
									cantidadDeGolpesDeEnemigos = 0;
								}
								proyectil = null;

								// si el jefe no tiene mas vida muere
								if (jefe != null && vidaJefe <= 0) {
									jefe = null;
									Herramientas.cargarSonido("JefeSonidoMuerte.wav").start();
									cantidadEnemigos++;
									cantidadPuntos += 20;
									Gano = true;
								}
							}
						}
					}
				}
			}

			// CODIGO ASTEROIDES
			if (asteroides != null) {
				for (int i = 0; i < asteroides.length; i++) {

					// Imprime los asteroides
					if (asteroides[i] != null) {
						asteroides[i].dibujarAsteroides(entorno);
						if (asteroides[i] != null && proyectil != null
								&& proyectil.chocasteConAsteroide(asteroides[i])) {
							cantidadDeGolpesDeEnemigos++;
							if (cantidadDeGolpesDeEnemigos >= 2) {
								asteroides[i] = null;
								Herramientas.cargarSonido("zap2.wav").start();
								cantidadDeGolpesDeEnemigos = 0;
							}
							proyectil = null;
						}
					}

					// Movimento de los asteroides
					if (i % 2 != 0 && asteroides[i] != null) {
						asteroides[i].moverAbajoIzquierda();
					} else {
						if (asteroides[i] != null && i % 2 == 0 || asteroides[i] != null && i == 0) {
							asteroides[i].moverAbajoDerecha();
						}
					}

					// Colision nave vs asteroides
					if (nave != null && asteroides[i] != null && nave.chocasteConAsteroide(asteroides[i])) {
						vidaNave = vidaNave - 100;
						nave = null;
						Perdio = true;
						asteroides[i] = null;
					}

					// Generacion asteroides (cuando desaparecen los primeros)
					if (Ticks % 200 == 0) {
						this.asteroides[i] = new Asteroides(r.nextInt(1400) - 300, -r.nextInt(500), 10);
						if (asteroides != null) {

							// Imprime los asteroides
							if (asteroides[i] != null) {
								asteroides[i].dibujarAsteroides(entorno);
							}

							// Movimento de los asteroides
							if (i % 2 != 0 && asteroides[i] != null) {
								asteroides[i].moverAbajoIzquierda();

							} else {
								if (asteroides[i] != null && i % 2 == 0 || asteroides[i] != null && i == 0)
									asteroides[i].moverAbajoDerecha();

							}
						}
					}
				}
			}

			// Texto por pantalla
			entorno.cambiarFont("Arial", 18, Color.WHITE);
			entorno.escribirTexto("Enemigos destruidos: " + cantidadEnemigos, 10, 20);
			entorno.escribirTexto("Puntaje: " + cantidadPuntos, 690, 20);
			entorno.escribirTexto("Ronda actual: " + Rounds, 340, 20);
			if (nave != null && vidaNave >= 0) {
				entorno.escribirTexto("Vida actual: " + vidaNave, 650, 550);
			}
		}
	}

	@SuppressWarnings("unused")
	public static void main(String[] args) {
		Juego juego = new Juego();

	}

}
----

.Clase Nave
[source, java]
----
package juego;

import java.awt.Image;
import entorno.Entorno;
import entorno.Herramientas;

public class Nave {

	private double x;
	private double y;
	private double velocidad;
	private double angulo;
	private double tamaño;
	private double distanciaDeLaNave;

	private Image Nave;

	public Nave(double x, double y, double velocidad) {

		this.x = x;
		this.y = y;

		this.Nave = Herramientas.cargarImagen("NaveBuena.png");

		this.velocidad = velocidad;
		this.angulo = 2 * -Math.PI;
		this.tamaño = 0.055;

		this.distanciaDeLaNave = 50; //actua como una "hitbox"

	}

	// Metodos Movimientos-Dibujar
	public void dibujarNave(Entorno entorno) {
		entorno.dibujarImagen(Nave, x, y, angulo, tamaño);
	}

	public void moverDerecha() {
		if (x - angulo / 2 < 750) {
			x += velocidad;
		}
	}

	public void moverIzquierda() {
		if (x - angulo / 2 > 60) {
			x -= velocidad;
		}

	}

	// Metodos Colision

	public boolean chocasteConAsteroide(Asteroides Asteroides) {
		return (x - Asteroides.getX()) * (x - Asteroides.getX())
				+ (y - Asteroides.getY()) * (y - Asteroides.getY()) < distanciaDeLaNave * distanciaDeLaNave;
	}

	public boolean chocasteConEnemigo(Enemigo Enemigo) {
		return (x - Enemigo.getX()) * (x - Enemigo.getX())
				+ (y - Enemigo.getY()) * (y - Enemigo.getY()) < distanciaDeLaNave * distanciaDeLaNave;
	}

	public boolean chocasteConBalaEnemiga(Bala Bala) {
		return (x - Bala.getX()) * (x - Bala.getX()) + (y - Bala.getY()) * (y - Bala.getY()) < distanciaDeLaNave
				* distanciaDeLaNave;
	}

	public boolean chocasteConBalaJefe(Bala Jefe) {
		return (x - Jefe.getX()) * (x - Jefe.getX()) + (y - Jefe.getY()) * (y - Jefe.getY()) < distanciaDeLaNave
				* distanciaDeLaNave;

	}

	// Metodo Disparo
	public Bala disparar(Entorno entorno) {

		Bala proyectil = new Bala(x, y, 20, "balaNave");
		return proyectil;
	}

}

----

.Clase Enemigo
[source, java]
----
package juego;

import java.awt.Image;

import entorno.Entorno;
import entorno.Herramientas;

public class Enemigo {
	private double x;
	private double y;
	private double xJefe;
	private double yJefe;
	private double angulo;
	private double direccion;
	private double alto;
	private double velocidadDestructor;
	private double velocidadJefe;
	private double tamañoDestructor;
	private double tamañoJefe;

	private boolean tipo;

	private Image destructorEstelar;
	private Image jefe;

	public Enemigo(double x, double y, double velocidad, boolean tipo) {

		// Destructores
		this.x = x;
		this.y = y;
		this.tipo = tipo;

		// Jefe
		this.xJefe = x;
		this.yJefe = y;

		// Otros
		this.destructorEstelar = Herramientas.cargarImagen("DestructorEstelar.png");
		this.jefe = Herramientas.cargarImagen("Jefe.png");
		this.tamañoDestructor = 0.060;
		this.tamañoJefe = 0.35;
		this.angulo = Math.PI * 2;
		this.direccion = 3;
		this.velocidadDestructor = velocidad;
		this.velocidadJefe = velocidad;
	}

	public void dibujarEnemigos(Entorno entorno) {
		if (tipo) {
			entorno.dibujarImagen(destructorEstelar, x, y, angulo, tamañoDestructor);
		} else {
			entorno.dibujarImagen(jefe, xJefe, yJefe, angulo, tamañoJefe);

		}
	}

	// Metodos mover
	public void moverEnemigos() {
		if (tipo) {
			aumentarVelocidad();
			moverNormal();
		} else {
			moverJefe();
		}
	}

	private void moverJefe() {
		if (xJefe < 100 || xJefe > 700) {
			direccion = -direccion;
		}

		if (yJefe != 160) {
			yJefe += velocidadJefe;
		} else {
			xJefe += velocidadJefe * direccion;
		}
	}

	private void moverNormal() {
		// Cambiar la dirección horizontal del enemigo si se llega al borde izquierdo o
		// derecho de la pantalla
		if (x < 50 || x > 750) {
			direccion = -direccion;
		}
		// Mover el enemigo hacia abajo y lo mueve
		y += velocidadDestructor;
		if (y > 0) {
			x += direccion;
		}
		if (y > 200) {
			x -= direccion;
		}
		if (y > 400) {
			x += direccion;
		}
		if (y > 550) {
			x -= direccion;
		}
	}

	private void aumentarVelocidad() {
		if (y > -50) {
			y += velocidadDestructor;
		}
	}

	public void invertirDireccionX() {
		direccion *= -1;
	}

	// fixme
	public boolean destructorChocaConDestructor(Enemigo otroDestructor) {
		int distanciaDeLaNave = 50;
		return (x - otroDestructor.getX()) * (x - otroDestructor.getX()) + (y - otroDestructor.getY()) * (y - otroDestructor.getY()) < distanciaDeLaNave * distanciaDeLaNave;
	}

	// Metodos disparar
	public Bala disparaDestructor(Entorno entorno) {
		Bala plasma = new Bala(x, y, -5, "balaEnemigo");
		return plasma;
	}

	public Bala disparaJefe(Entorno entorno) {
		Bala superPlasma = new Bala(xJefe, yJefe, -4, "balaJefe");
		return superPlasma;
	}

	// Metodos Limites Entorno
	public boolean EnemigosReaparicionYEliminacionDelLimiteEntorno(Entorno entorno, Enemigo enemigo) {
		return (enemigo.getY() > entorno.alto() + 50);
	}

	public double distanciaAlBordeInferior(Enemigo enemigo) {
		double distancia = 600 - (enemigo.getY() + enemigo.getAlto());
		return distancia;
	}

	// Este Getter lo necesitamos para la funcion distanciaAlBordeInferior
	public double getAlto() {
		return alto;
	}

	// Estos Getters los necesitamos para que la bala detecte la posicion de los
	// enemigos y estos puedan disparar.
	public double getX() {
		return x;
	}

	public double getY() {
		return y;
	}

	// Estos Getters los necesitamos para la clase bala.
	public double getXJefe() {
		return xJefe;
	}

	public double getYJefe() {
		return yJefe;
	}

}
----

.Clase Asteroide
[source, java]
----
package juego;

import java.awt.Image;

import entorno.Entorno;
import entorno.Herramientas;

public class Asteroides {
    private double x;
    private double y;
    private double angulo;
    private double velocidad;
    private double tamaño;
    private Image Asteroides;
    public Asteroides(double x, double y, double velocidad) {
        this.x = x;
        this.y = y;
        this.velocidad = velocidad;
        this.angulo = Math.PI / 2;
        this.Asteroides = Herramientas.cargarImagen("Asteroides.png");
        this.tamaño = 0.08;
    }
    // Metodo dibujar.
    public void dibujarAsteroides(Entorno entorno) {
        entorno.dibujarImagen(Asteroides, x, y, angulo, tamaño);
    }
    // Metodo Mover derecha o izquierda 
    public void moverAbajoDerecha() {
        y += velocidad;
        x += velocidad;
    }
    public void moverAbajoIzquierda() {
        y += velocidad;
        x -= velocidad;
    }
    // Getters
    public double getX() {
        return x;
    }
    public double getY() {
        return y;
    }
}
----

.Clase Fondo
[source, java]
----
package juego;

import java.awt.Image;

import entorno.Entorno;
import entorno.Herramientas;

public class Fondo {
	private Image FondoEstrella;
	private Image FondoEstrellaSegundaParte;
	private Image FondoInicio;
	private Image FondoFinal;
	private Image FondoGanado;
	private double yFondoEstrella;
	private double yFondoEstrellaSegundaParte;
	private double velocidad;
	private double angulo;
	public Fondo(String rutaArchivo) {
		this.FondoEstrella = Herramientas.cargarImagen("FondoEstrella.jpg");
		this.FondoEstrellaSegundaParte = Herramientas.cargarImagen("FondoEstrella.jpg");
		this.FondoInicio = Herramientas.cargarImagen("FondoInicio.png");
		this.FondoFinal = Herramientas.cargarImagen("FondoFinal.png");
		this.FondoGanado = Herramientas.cargarImagen("FondoGanado.png");
		this.yFondoEstrella = 0;
		this.yFondoEstrellaSegundaParte = -FondoEstrella.getHeight(null);
		this.velocidad = 4;
		this.angulo = 0;
	}
	// Metodos dibujar
	public void dibujarFondo(Entorno entorno) {
		if (yFondoEstrella >= -800) {
			entorno.dibujarImagen(FondoEstrella, 400, yFondoEstrella + 0, angulo, 1);
		}
		if (yFondoEstrellaSegundaParte >= -800) {
			entorno.dibujarImagen(FondoEstrellaSegundaParte, 400, yFondoEstrellaSegundaParte - 5, angulo, 1);
		}
	}
	public void dibujarInicio(Entorno entorno) {
		entorno.dibujarImagen(FondoInicio, 400, 300, angulo);

	}
	public void dibujarFinal(Entorno entorno) {
		entorno.dibujarImagen(FondoFinal, 400, 300, angulo);

	}
	public void dibujarGanado(Entorno entorno) {
		entorno.dibujarImagen(FondoGanado, 400, 300, angulo);

	}
	// Movemos el fondo de atras, cuando llegan a 1644(alto) es el final de la foto,
	// luego imprime el mismo fondo y asi sucesivamente
	public void mover() {
		yFondoEstrella += velocidad;
		yFondoEstrellaSegundaParte += velocidad;

		if (yFondoEstrella >= 1644) {
			yFondoEstrella = yFondoEstrellaSegundaParte - FondoEstrella.getHeight(null);
		}
		if (yFondoEstrellaSegundaParte >= 1644) {
			yFondoEstrellaSegundaParte = yFondoEstrella - FondoEstrellaSegundaParte.getHeight(null);
		}
	}
}
----

.Clase Bala
[source, java]
----
package juego;

import java.awt.Image;

import entorno.Entorno;
import entorno.Herramientas;

public class Bala {

	private double x;
	private double y;

	private double velocidad;
	private double tamañoBalaNave;
	private double tamañoBalaEnemiga;
	private double angulo;
	private double tamañoBalaJefe;
	private double distanciaDeLaBala;

	private Image balaNave;
	private Image balaEnemiga;
	private Image balaJefe;

	public Bala(double x, double y, double velocidad, String tipo) {

		this.x = x;
		this.y = y;
		this.velocidad = velocidad;

		this.balaNave = Herramientas.cargarImagen("disparoLaser.png");
		this.balaEnemiga = Herramientas.cargarImagen("plasma2.png");
		this.balaJefe = Herramientas.cargarImagen("plasmaJefe.png");

		this.tamañoBalaNave = 0.05;
		this.tamañoBalaEnemiga = 0.20;
		this.tamañoBalaJefe = 0.30;

		this.angulo = 600;
		this.distanciaDeLaBala = 50; // actua como una "hitbox"
	}

	// Metodos de colision
	public boolean chocasteConEnemigo(Enemigo Enemigo, boolean tipo) {
		// chocaConDestructorYJefe
		if (tipo == true) {
			return (x - Enemigo.getX()) * (x - Enemigo.getX())
					+ (y - Enemigo.getY()) * (y - Enemigo.getY()) < distanciaDeLaBala * distanciaDeLaBala;
		} else {
			return (x - Enemigo.getXJefe()) * (x - Enemigo.getXJefe())
					+ (y - Enemigo.getYJefe()) * (y - Enemigo.getYJefe()) < distanciaDeLaBala * distanciaDeLaBala;
		}

	}

	public boolean chocasteConAsteroide(Asteroides Asteroides) {
		// chocaConAsteroide
		return (x - Asteroides.getX()) * (x - Asteroides.getX())
				+ (y - Asteroides.getY()) * (y - Asteroides.getY()) < distanciaDeLaBala * distanciaDeLaBala;
	}

	// Metodos dibujar-avanzar
	public void dibujarBala(Entorno entorno, String tipo) {
		if (tipo.equals("balaNave")) {
			entorno.dibujarImagen(balaNave, x, y, angulo, tamañoBalaNave);

		} else if (tipo.equals("balaEnemiga")) {
			entorno.dibujarImagen(balaEnemiga, x, y, angulo, tamañoBalaEnemiga);
		} else if (tipo.equals("balaJefe")) {
			entorno.dibujarImagen(balaJefe, x, y, angulo, tamañoBalaJefe);

		}

	}

	public void avanzarBala() {
		y -= velocidad;

	}

	// Metodos Limite Entorno
	public boolean PlasmasPasaElLimite(Bala bala) {
		if (bala.getY() > 1000) {
			return true;
		}
		return false;
	}

	public boolean ProyectilNavePasaElLimite(Bala bala) {
		if (bala.getY() < -50) {
			return true;
		}
		return false;
	}

	// Estos Getters los necesitamos en la clase Nave
	public double getY() {
		return y;
	}

	public double getX() {
		return x;
	}

}
----

== Conclusiones

Este trabajo nos pareció muy bueno para formarnos y también darnos otras visiones que no teníamos, como grupo no tuvimos ningún 
inconveniente, supimos llevar todo el proyecto de muy buena forma, el juego fue bastante didáctico y fácil comprensión, lo único 
que no nos gusto fue el hecho de que no es de código abierto, para poder comprender mejor o mismo hacer cambios a nuestro favor. 
El proyecto final nos hubiera gustado agregar más cosas si tuviéramos libertad en la producción, pero quedamos muy satisfechos 
y contentos con lo realizado.